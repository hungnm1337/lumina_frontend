import { Component, OnInit, OnDestroy, Input, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ChatService } from '../../../Services/Chat/chat.service';
import { AuthService } from '../../../Services/Auth/auth.service';
import { ToastService } from '../../../Services/Toast/toast.service';
import { Router } from '@angular/router';
import { 
  ChatRequestDTO, 
  ChatResponseDTO, 
  ChatMessage, 
  GeneratedVocabularyDTO,
  SaveVocabularyRequestDTO 
} from '../../../Interfaces/Chat/ChatResponseDTO.interface';

@Component({
  selector: 'app-chat',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './chat.component.html',
  styleUrls: ['./chat.component.scss']
})
export class ChatComponent implements OnInit, OnDestroy {
  @Input() messages: ChatMessage[] = [];
  @Output() messageAdded = new EventEmitter<ChatMessage>();
  
  // messages: ChatMessage[] = []; // Removed, now using @Input
  currentMessage = '';
  isGenerating = false;
  conversationType = 'general';
  showSaveButton = false;
  generatedVocabularies: GeneratedVocabularyDTO[] = [];
  showSuggestedQuestions = true;

  // C√°c lo·∫°i c√¢u h·ªèi g·ª£i √Ω
  suggestedQuestions: { [key: string]: string[] } = {
    vocabulary: [
      "T·ª´ 'acquire' nghƒ©a l√† g√¨?",
      "T·∫°o 10 t·ª´ v·ª±ng v·ªÅ Business",
      "Ph√¢n bi·ªát 'affect' v√† 'effect'",
      "T·ª´ v·ª±ng TOEIC Part 5 th∆∞·ªùng g·∫∑p"
    ],
    grammar: [
      "Khi n√†o d√πng Present Perfect?",
      "Ph√¢n bi·ªát 'since' v√† 'for'",
      "C√°ch d√πng Passive Voice",
      "Th√¨ qu√° kh·ª© ƒë∆°n v√† qu√° kh·ª© ho√†n th√†nh"
    ],
    toeic_strategy: [
      "M·∫πo l√†m Part 5 nhanh",
      "Chi·∫øn l∆∞·ª£c l√†m Part 7",
      "C√°ch c·∫£i thi·ªán Listening",
      "Qu·∫£n l√Ω th·ªùi gian trong TOEIC"
    ],
    practice: [
      "T·∫°o b√†i t·∫≠p ng·ªØ ph√°p",
      "Luy·ªán t·∫≠p t·ª´ v·ª±ng y·∫øu",
      "ƒê·ªÅ thi th·ª≠ TOEIC",
      "C√°ch √¥n t·∫≠p hi·ªáu qu·∫£"
    ]
  };

  constructor(
    private chatService: ChatService,
    private authService: AuthService,
    private toastService: ToastService,
    private router: Router
  ) {}

  ngOnInit(): void {
    // Ch·ªâ th√™m tin nh·∫Øn ch√†o m·ª´ng n·∫øu ch∆∞a c√≥ messages t·ª´ input
    if (this.messages.length === 0) {
      this.messages.push({
        type: 'ai',
        content: '**Xin ch√†o! T√¥i l√† AI Assistant**\n\nT√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n**T·∫°o ƒë·ªÅ thi TOEIC:**\n‚Ä¢ T·∫°o 5 c√¢u Reading Part 5 v·ªÅ gi·ªõi t·ª´\n‚Ä¢ Gen 10 c√¢u Listening Part 1\n\n**T∆∞ v·∫•n & H·ªó tr·ª£:**\n‚Ä¢ C√°ch h·ªçc TOEIC hi·ªáu qu·∫£?\n‚Ä¢ Gi·∫£i th√≠ch c·∫•u tr√∫c c√¢u n√†y\n\n**Tips**: M√¥ t·∫£ c√†ng chi ti·∫øt, k·∫øt qu·∫£ c√†ng t·ªët!\n\nB·∫°n mu·ªën t√¥i gi√∫p g√¨ n√†o? üòä',
        timestamp: new Date(),
        conversationType: 'general',
        suggestions: [
          'T·∫°o ƒë·ªÅ thi TOEIC',
          'T∆∞ v·∫•n h·ªçc TOEIC',
          'Gi·∫£i th√≠ch ng·ªØ ph√°p',
          'Chi·∫øn l∆∞·ª£c l√†m b√†i'
        ]
      });
    }
  }

  ngOnDestroy(): void {
    // Cleanup n·∫øu c·∫ßn
  }

  async sendMessage(): Promise<void> {
    if (!this.currentMessage.trim() || this.isGenerating) return;

    // Th√™m tin nh·∫Øn user
    const userMessage: ChatMessage = {
      type: 'user',
      content: this.currentMessage,
      timestamp: new Date()
    };
    
    this.messages.push(userMessage);
    this.messageAdded.emit(userMessage); // Emit tin nh·∫Øn user

    this.isGenerating = true;
    const userMessageText = this.currentMessage;
    this.currentMessage = '';

    try {
      const request: ChatRequestDTO = {
        message: userMessageText,
        userId: this.authService.getCurrentUserId(),
        conversationType: this.conversationType
      };

      const response = await this.chatService.askQuestion(request).toPromise();

      if (response) {
        // X·ª≠ l√Ω c√¢u tr·∫£ l·ªùi ngo√†i ph·∫°m vi TOEIC
        if (response.conversationType === 'out_of_scope') {
          this.toastService.info('T√¥i ch·ªâ h·ªó tr·ª£ v·ªÅ TOEIC v√† h·ªçc ti·∫øng Anh th√¥i nh√©!');
        }
        
        // Format c√¢u tr·∫£ l·ªùi AI
        const formattedContent = this.formatAIResponse(response.answer);
        
        // Th√™m tin nh·∫Øn AI
        const aiMessage: ChatMessage = {
          type: 'ai',
          content: formattedContent,
          timestamp: new Date(),
          conversationType: response.conversationType,
          suggestions: response.suggestions,
          examples: response.examples,
          relatedWords: response.relatedWords,
          vocabularies: response.vocabularies,
          hasSaveOption: response.hasSaveOption
        };
        
        this.messages.push(aiMessage);
        this.messageAdded.emit(aiMessage); // Emit tin nh·∫Øn AI

        // C·∫≠p nh·∫≠t lo·∫°i cu·ªôc tr√≤ chuy·ªán
        this.conversationType = response.conversationType;

        // N·∫øu c√≥ t·ª´ v·ª±ng ƒë∆∞·ª£c t·∫°o
        if (response.vocabularies && response.vocabularies.length > 0) {
          this.generatedVocabularies = response.vocabularies;
          this.showSaveButton = true;
        }
      }

    } catch (error) {
      console.error('Error sending message:', error);
      this.toastService.error('L·ªói khi g·ª≠i tin nh·∫Øn!');
    } finally {
      this.isGenerating = false;
    }
  }

  selectSuggestedQuestion(question: string): void {
    this.currentMessage = question;
  }

  setConversationType(type: string): void {
    // N·∫øu click v√†o c√πng tab ƒëang active, ·∫©n ho√†n to√†n suggested questions
    if (this.conversationType === type) {
      this.showSuggestedQuestions = false;
    } else {
      // N·∫øu click v√†o tab kh√°c, ƒë·ªïi conversation type v√† hi·ªÉn th·ªã suggested questions
      this.conversationType = type;
      this.showSuggestedQuestions = true;
    }
    
    this.showSaveButton = false;
    this.generatedVocabularies = [];
  }

  toggleSuggestedQuestions(): void {
    this.showSuggestedQuestions = !this.showSuggestedQuestions;
  }

  async saveVocabularies(): Promise<void> {
    if (this.generatedVocabularies.length === 0) return;

    const folderName = prompt('Nh·∫≠p t√™n folder cho t·ª´ v·ª±ng:', 'Vocabulary Folder');
    if (!folderName) return;

    try {
      const request: SaveVocabularyRequestDTO = {
        userId: this.authService.getCurrentUserId(),
        folderName: folderName,
        vocabularies: this.generatedVocabularies
      };

      const response = await this.chatService.saveVocabularies(request).toPromise();

      if (response && response.success) {
        this.toastService.success(response.message);
        
        // ·∫®n n√∫t l∆∞u
        this.showSaveButton = false;
        this.generatedVocabularies = [];

        // Th√™m tin nh·∫Øn x√°c nh·∫≠n
        this.messages.push({
          type: 'ai',
          content: response.message,
          timestamp: new Date()
        });

        // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang T·ª´ v·ª±ng v√† highlight folder m·ªõi t·∫°o
        try {
          const listId = response.vocabularyListId;
          if (listId) {
            this.router.navigate(['/tu-vung'], { queryParams: { highlight: listId } });
          } else {
            this.router.navigate(['/tu-vung']);
          }
        } catch {}
      }

    } catch (error) {
      console.error('Error saving vocabularies:', error);
      this.toastService.error('L·ªói khi l∆∞u t·ª´ v·ª±ng!');
    }
  }

  getPlaceholderText(): string {
    switch (this.conversationType) {
      case 'vocabulary':
        return 'H·ªèi v·ªÅ t·ª´ v·ª±ng TOEIC...';
      case 'grammar':
        return 'H·ªèi v·ªÅ ng·ªØ ph√°p...';
      case 'toeic_strategy':
        return 'H·ªèi v·ªÅ chi·∫øn l∆∞·ª£c TOEIC...';
      case 'practice':
        return 'H·ªèi v·ªÅ luy·ªán t·∫≠p...';
      default:
        return 'H·ªèi v·ªÅ TOEIC...';
    }
  }

  onKeyPress(event: KeyboardEvent): void {
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      this.sendMessage();
    }
  }

  onInput(event: any): void {
    // Auto-resize textarea
    const textarea = event.target;
    textarea.style.height = 'auto';
    textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
  }

  formatAIResponse(content: string): string {
    // Format c√¢u tr·∫£ l·ªùi AI v·ªõi emoji v√† styling ƒë·∫πp m·∫Øt
    let formatted = content;

    // Th√™m emoji cho c√°c section ch√≠nh
    formatted = formatted.replace(/\*\*Gi·∫£i th√≠ch:\*\*/g, 'üìö **Gi·∫£i th√≠ch:**');
    formatted = formatted.replace(/\*\*V√≠ d·ª• trong ti·∫øng Anh:\*\*/g, 'üí° **V√≠ d·ª• trong ti·∫øng Anh:**');
    formatted = formatted.replace(/\*\*Ng·ªØ c·∫£nh TOEIC:\*\*/g, 'üéØ **Ng·ªØ c·∫£nh TOEIC:**');
    formatted = formatted.replace(/\*\*M·∫πo ghi nh·ªõ:\*\*/g, 'üí≠ **M·∫πo ghi nh·ªõ:**');
    formatted = formatted.replace(/\*\*T·ª´ v·ª±ng li√™n quan:\*\*/g, 'üîó **T·ª´ v·ª±ng li√™n quan:**');
    formatted = formatted.replace(/\*\*C√°ch s·ª≠ d·ª•ng:\*\*/g, 'üìù **C√°ch s·ª≠ d·ª•ng:**');
    formatted = formatted.replace(/\*\*L∆∞u √Ω:\*\*/g, '‚ö†Ô∏è **L∆∞u √Ω:**');
    formatted = formatted.replace(/\*\*Tips:\*\*/g, 'üéØ **Tips:**');

    // Format c√°c ph∆∞∆°ng ph√°p h·ªçc t·∫≠p
    formatted = formatted.replace(/(\d+\.\s*[^:]+:)/g, 'üéØ **$1**');
    formatted = formatted.replace(/^(\d+\.\s*[^:]+:)/gm, 'üéØ **$1**');

    // Th√™m emoji cho c√°c bullet points
    formatted = formatted.replace(/^\* /gm, '‚Ä¢ ');
    formatted = formatted.replace(/^- /gm, '‚Ä¢ ');

    // Format c√°c t·ª´ kh√≥a quan tr·ªçng trong ngo·∫∑c k√©p
    formatted = formatted.replace(/'([^']+)'/g, '**"$1"**');

    // Format c√°c t·ª´ v·ª±ng ti·∫øng Anh quan tr·ªçng
    formatted = formatted.replace(/\b(acquire|merger|negotiate|revenue|expenditure|profitability|strategy|outsource|investment|cost-cutting)\b/g, '**$1**');

    // Th√™m emoji cho c√°c c√¢u h·ªèi
    if (formatted.includes('B·∫°n c√≥ th·ªÉ g·∫∑p') || formatted.includes('b·∫°n c√≥ th·ªÉ g·∫∑p')) {
      formatted = formatted.replace(/(B·∫°n c√≥ th·ªÉ g·∫∑p[^:]*:)/g, 'üîç $1');
    }

    // Th√™m emoji cho c√°c c·ª•m t·ª´ quan tr·ªçng
    formatted = formatted.replace(/(\*\*[^*]+\*\*):/g, 'üìå $1:');

    // Format c√°c v√≠ d·ª• c√¢u
    formatted = formatted.replace(/(V√≠ d·ª•[^:]*:)/g, 'üí° **$1**');
    formatted = formatted.replace(/(T∆∞∆°ng t·ª±[^:]*:)/g, 'üîÑ **$1**');

    // Format c√°c ngu·ªìn t√†i li·ªáu
    formatted = formatted.replace(/(Wall Street Journal|Financial Times|b√°o kinh t·∫ø)/g, 'üì∞ **$1**');

    // Th√™m emoji cho c√°c ph∆∞∆°ng ph√°p c·ª• th·ªÉ
    formatted = formatted.replace(/(Contextual Learning|Related Word Groups|Spaced Repetition|flashcards)/g, 'üéì **$1**');

    // Format c√°c ph·∫ßn k·∫øt lu·∫≠n
    formatted = formatted.replace(/(T√≥m l·∫°i|K·∫øt lu·∫≠n|Ch√∫c b·∫°n)/g, 'üéâ **$1**');

    return formatted;
  }

  formatMessageContent(content: string): string {
    // Convert markdown-style formatting to HTML
    let formatted = content;

    // Convert **bold** to <strong> with better styling
    formatted = formatted.replace(/\*\*([^*]+)\*\*/g, '<strong style="color: #4F46E5; font-weight: 600;">$1</strong>');

    // Convert *italic* to <em>
    formatted = formatted.replace(/\*([^*]+)\*/g, '<em style="color: #6B7280;">$1</em>');

    // Convert bullet points to HTML list with better styling
    formatted = formatted.replace(/^‚Ä¢ (.+)$/gm, '<li style="margin: 8px 0; padding-left: 8px;">$1</li>');
    formatted = formatted.replace(/(<li style="margin: 8px 0; padding-left: 8px;">.*<\/li>)/s, '<ul style="margin: 12px 0; padding-left: 20px;">$1</ul>');

    // Format numbered lists
    formatted = formatted.replace(/^(\d+\.\s*[^:]+:)/gm, '<div style="background: #F3F4F6; padding: 12px; margin: 8px 0; border-radius: 8px; border-left: 4px solid #4F46E5;">$1</div>');

    // Convert line breaks
    formatted = formatted.replace(/\n/g, '<br>');

    // Convert multiple line breaks to paragraphs with better spacing
    formatted = formatted.replace(/(<br>){2,}/g, '</p><p style="margin: 16px 0; line-height: 1.6;">');
    formatted = '<p style="margin: 0; line-height: 1.6;">' + formatted + '</p>';

    // Add special styling for examples
    formatted = formatted.replace(/(V√≠ d·ª•[^:]*:)/g, '<div style="background: #FEF3C7; padding: 12px; margin: 12px 0; border-radius: 8px; border-left: 4px solid #F59E0B;"><strong>$1</strong></div>');

    // Add special styling for tips
    formatted = formatted.replace(/(Tips[^:]*:)/g, '<div style="background: #ECFDF5; padding: 12px; margin: 12px 0; border-radius: 8px; border-left: 4px solid #10B981;"><strong>$1</strong></div>');

    return formatted;
  }
}
