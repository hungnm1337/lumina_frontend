import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ChatComponent } from '../../User/chat/chat.component';
import { ChatMessage } from '../../../Interfaces/Chat/ChatResponseDTO.interface';

@Component({
  selector: 'app-floating-chat',
  standalone: true,
  imports: [CommonModule, ChatComponent],
  templateUrl: './floating-chat.component.html',
  styleUrls: ['./floating-chat.component.scss']
})
export class FloatingChatComponent {
  isOpen = false;
   private isProcessingMessage = false;
  
  // L∆∞u tr·ªØ tin nh·∫Øn trong memory
  savedMessages: ChatMessage[] = [];

  constructor() {
    // Kh·ªüi t·∫°o tin nh·∫Øn ch√†o m·ª´ng n·∫øu ch∆∞a c√≥
    this.initializeWelcomeMessage();
  }

  toggleChatbox() {
    this.isOpen = !this.isOpen;
  }

  closeChatbox() {
    this.isOpen = false;
    // Kh√¥ng x√≥a savedMessages, gi·ªØ nguy√™n ƒë·ªÉ hi·ªÉn th·ªã l·∫°i khi m·ªü
  }

  // Kh·ªüi t·∫°o tin nh·∫Øn ch√†o m·ª´ng
  private initializeWelcomeMessage() {
    if (this.savedMessages.length === 0) {
      this.savedMessages.push({
        type: 'ai',
        content: '**Xin ch√†o! T√¥i l√† AI Assistant**\n\nT√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n**T·∫°o ƒë·ªÅ thi TOEIC:**\n‚Ä¢ T·∫°o 5 c√¢u Reading Part 5 v·ªÅ gi·ªõi t·ª´\n‚Ä¢ Gen 10 c√¢u Listening Part 1\n\n**T∆∞ v·∫•n & H·ªó tr·ª£:**\n‚Ä¢ C√°ch h·ªçc TOEIC hi·ªáu qu·∫£?\n‚Ä¢ Gi·∫£i th√≠ch c·∫•u tr√∫c c√¢u n√†y\n\n**Tips**: M√¥ t·∫£ c√†ng chi ti·∫øt, k·∫øt qu·∫£ c√†ng t·ªët!\n\nB·∫°n mu·ªën t√¥i gi√∫p g√¨ n√†o? üòä',
        timestamp: new Date(),
        conversationType: 'general',
        suggestions: [
          'T·∫°o ƒë·ªÅ thi TOEIC',
          'T∆∞ v·∫•n h·ªçc TOEIC',
          'Gi·∫£i th√≠ch ng·ªØ ph√°p',
          'Chi·∫øn l∆∞·ª£c l√†m b√†i'
        ]
      });
    }
  }

  // X·ª≠ l√Ω khi c√≥ tin nh·∫Øn m·ªõi ƒë∆∞·ª£c th√™m
  onMessageAdded(newMessage: ChatMessage) {
    if (this.isProcessingMessage) return;
    
    this.isProcessingMessage = true;
    
    // Ki·ªÉm tra xem tin nh·∫Øn ƒë√£ t·ªìn t·∫°i ch∆∞a
    const isDuplicate = this.savedMessages.some(msg => 
      msg.content === newMessage.content && 
      msg.type === newMessage.type &&
      // So s√°nh timestamp trong kho·∫£ng 1 gi√¢y
      Math.abs(msg.timestamp.getTime() - newMessage.timestamp.getTime()) < 1000
    );

    if (!isDuplicate) {
      this.savedMessages.push(newMessage);
      
      // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng tin nh·∫Øn
      if (this.savedMessages.length > 100) {
        this.savedMessages = this.savedMessages.slice(-100);
      }
    }

    // Reset flag sau khi x·ª≠ l√Ω xong
    setTimeout(() => {
      this.isProcessingMessage = false;
    }, 100);
  }
  }